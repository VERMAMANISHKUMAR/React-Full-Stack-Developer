{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nconst INITIAL_STATE = {\n  comments: [],\n  isLoading: false,\n  error: null\n};\nexport const getCommentsAsync = createAsyncThunk(\"comments/fetch\", async (_, thunkAPI) => {\n  try {\n    const reponse = await fetch(\"https://jsonplaceholder.typicode.com/comments\");\n    const data = await reponse.json();\n    thunkAPI.dispatch(fetchSuccess(data));\n  } catch (e) {\n    thunkAPI.dispatch(fetchError());\n  }\n});\nconst commentsSlice = createSlice({\n  name: \"comments\",\n  initialState: INITIAL_STATE,\n  reducers: {\n    fetchStart: (state, action) => {\n      state.isLoading = true;\n    },\n    fetchSuccess: (state, action) => {\n      state.comments = action.payload;\n      state.isLoading = false;\n    },\n    fetchError: (state, action) => {\n      state.error = \"Failed to fetch comments.\";\n      state.isLoading = false;\n    }\n  }\n});\nexport const commentsReducer = commentsSlice.reducer;\nexport const {\n  fetchStart,\n  fetchSuccess,\n  fetchError\n} = commentsSlice.actions;\nexport const commentsSelector = state => state.commentsReducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","INITIAL_STATE","comments","isLoading","error","getCommentsAsync","_","thunkAPI","reponse","fetch","data","json","dispatch","fetchSuccess","e","fetchError","commentsSlice","name","initialState","reducers","fetchStart","state","action","payload","commentsReducer","reducer","actions","commentsSelector"],"sources":["D:/React Learn coding ninja-2/Week-04/3Q CommentFetch_createAsyncThunk/q3_scaffold/src/redux/reducers/commentsReducer.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst INITIAL_STATE = { comments: [], isLoading: false, error: null };\r\n\r\nexport const getCommentsAsync = createAsyncThunk(\r\n  \"comments/fetch\",\r\n  async (_, thunkAPI) => {\r\n    try {\r\n      const reponse = await fetch(\r\n        \"https://jsonplaceholder.typicode.com/comments\"\r\n      );\r\n      const data = await reponse.json();\r\n      thunkAPI.dispatch(fetchSuccess(data));\r\n    } catch (e) {\r\n      thunkAPI.dispatch(fetchError());\r\n    }\r\n  }\r\n);\r\n\r\nconst commentsSlice = createSlice({\r\n  name: \"comments\",\r\n  initialState: INITIAL_STATE,\r\n  reducers: {\r\n    fetchStart: (state, action) => {\r\n      state.isLoading = true;\r\n    },\r\n    fetchSuccess: (state, action) => {\r\n      state.comments = action.payload;\r\n      state.isLoading = false;\r\n    },\r\n    fetchError: (state, action) => {\r\n      state.error = \"Failed to fetch comments.\";\r\n      state.isLoading = false;\r\n    },\r\n  },\r\n});\r\n\r\nexport const commentsReducer = commentsSlice.reducer;\r\nexport const { fetchStart, fetchSuccess, fetchError } = commentsSlice.actions;\r\n\r\nexport const commentsSelector = (state) => state.commentsReducer;"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAEhE,MAAMC,aAAa,GAAG;EAAEC,QAAQ,EAAE,EAAE;EAAEC,SAAS,EAAE,KAAK;EAAEC,KAAK,EAAE;AAAK,CAAC;AAErE,OAAO,MAAMC,gBAAgB,GAAGN,gBAAgB,CAC9C,gBAAgB,EAChB,OAAOO,CAAC,EAAEC,QAAQ,KAAK;EACrB,IAAI;IACF,MAAMC,OAAO,GAAG,MAAMC,KAAK,CACzB,+CACF,CAAC;IACD,MAAMC,IAAI,GAAG,MAAMF,OAAO,CAACG,IAAI,CAAC,CAAC;IACjCJ,QAAQ,CAACK,QAAQ,CAACC,YAAY,CAACH,IAAI,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOI,CAAC,EAAE;IACVP,QAAQ,CAACK,QAAQ,CAACG,UAAU,CAAC,CAAC,CAAC;EACjC;AACF,CACF,CAAC;AAED,MAAMC,aAAa,GAAGhB,WAAW,CAAC;EAChCiB,IAAI,EAAE,UAAU;EAChBC,YAAY,EAAEjB,aAAa;EAC3BkB,QAAQ,EAAE;IACRC,UAAU,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC7BD,KAAK,CAAClB,SAAS,GAAG,IAAI;IACxB,CAAC;IACDU,YAAY,EAAEA,CAACQ,KAAK,EAAEC,MAAM,KAAK;MAC/BD,KAAK,CAACnB,QAAQ,GAAGoB,MAAM,CAACC,OAAO;MAC/BF,KAAK,CAAClB,SAAS,GAAG,KAAK;IACzB,CAAC;IACDY,UAAU,EAAEA,CAACM,KAAK,EAAEC,MAAM,KAAK;MAC7BD,KAAK,CAACjB,KAAK,GAAG,2BAA2B;MACzCiB,KAAK,CAAClB,SAAS,GAAG,KAAK;IACzB;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAMqB,eAAe,GAAGR,aAAa,CAACS,OAAO;AACpD,OAAO,MAAM;EAAEL,UAAU;EAAEP,YAAY;EAAEE;AAAW,CAAC,GAAGC,aAAa,CAACU,OAAO;AAE7E,OAAO,MAAMC,gBAAgB,GAAIN,KAAK,IAAKA,KAAK,CAACG,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}